buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.2.3'
    }
}

apply plugin: 'scala'
apply plugin: 'forge'
import org.ajoberstar.gradle.git.tasks.*

task cloneGitRepo(type: GitClone, dependsOn: "extractUserDev") {
    def destination = file("temp")
    uri = "https://github.com/CoFH/RedstoneFlux-API.git"
    destinationPath = destination
    bare = false
    enabled = !destination.exists() //to clone only once
}

task copyApi(type: Copy, dependsOn: "cloneGitRepo") {
            from "temp/src/main"
            into "src/api"
            includeEmptyDirs=true
    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}
tasks.setupDevWorkspace.dependsOn copyApi
tasks.setupDecompWorkspace.dependsOn copyApi
tasks.setupCIWorkspace.dependsOn copyApi
project.ext.buildnumber = "CUSTOM_BUILD"

if(System.getenv("BUILD_NUMBER"))
{
	project.buildnumber = System.getenv("BUILD_NUMBER")
}

version = "3.0-ALPHA-$project.buildnumber"
group= "com.minalien.mffs"
archivesBaseName = "ModularForcefieldSystem-1.7.10"

repositories {
}

minecraft {
    version = "1.7.10-10.13.2.1236"
    runDir = "eclipse"
}

dependencies {
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar, dependsOn: 'classes') {
	from(sourceSets.main.output) {
		include '**'
	}

	extension = 'jar'
	classifier = 'deobf'
}

artifacts {
	archives deobfJar
}