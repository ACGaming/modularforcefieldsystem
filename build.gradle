
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
	mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    } 

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
	classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.2'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'
/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/
group= "com.nekokittygames.mffs" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "MFFS"
def mcVersion="1.8.9-11.15.1.1808"
version = "1.0-${mcVersion}"
if (System.getenv("BUILD_NUMBER")!=null)
    version = "$version-${System.getenv().BUILD_NUMBER}"
if (project.hasProperty("releaseType"))
    if (project.releaseType == "ALPHA")
        version = "alpha-" + version
def otherVersion=version
minecraft {
    version = mcVersion
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_20"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    replaceIn "src/main/java/com/nekokittygames/mffs/common/libs/LibMisc.java"
    replace "@VERSION", otherVersion
    replace "MCVERSION",version
}

repositories {
    ivy {
        name "BuildCraft"
        artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
    }
}
dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    compile name: 'buildcraft', version: '7.2.5', classifier: "dev", ext: 'jar'
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


task getLatestCoFH(type: com.palominolabs.gradle.task.git.clone.GitCloneTask, dependsOn: "deobfProvidedDummyTask" ) {
  dir = file("$buildDir/tmp")
  uri = 'https://github.com/CoFH/RedstoneFlux-API.git'
  treeish = 'origin/1.8' // a commit hash, or tag name, or branch name (with remote prefix, like 'origin/master')
}

task copyLatestCoFH(type: Copy , dependsOn: "getLatestCoFH" ) {
	def tempDir = file("$buildDir/tmp/src/main/java")
	from tempDir
	into "src/api/java"
}

tasks.setupDevWorkspace.dependsOn copyLatestCoFH
tasks.setupDecompWorkspace.dependsOn copyLatestCoFH

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task apiJar(type: Jar) {
    from fileTree(dir: 'src/main/java').matching { include 'com/nekokittygames/mffs/api/**' }
    classifier = 'api'
}


task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

publishing {
    publications {
        main(MavenPublication) {
            groupId 'com.nekokittygames.mffs'
            artifactId 'MFFS'
            from components.java
        }
        api(MavenPublication) {
            groupId 'com.nekokittygames.mffs'
            artifactId 'MFFS'
            artifact apiJar
        }
        dev(MavenPublication) {
            groupId 'com.nekokittygames.mffs'
            artifactId 'MFFS'
            artifact deobfJar
        }
        sources(MavenPublication) {
            groupId 'com.nekokittygames.mffs'
            artifactId 'MFFS'
            artifact sourcesJar
        }

    }
    repositories {
        maven {
            url "/var/www/maven/"
        }
    }
}